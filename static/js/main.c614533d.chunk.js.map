{"version":3,"sources":["components/Cards.js","components/CardLists.js","components/SearchBox.js","components/Scroll.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Cards","id","name","username","email","className","alt","src","CardList","robots","cardArray","map","users","i","SearchBox","onSearchField","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","state","searchField","onSearchChange","event","setState","target","value","fetch","then","response","json","this","filterRobot","filter","robot","toLocaleLowerCase","includes","length","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6OAgBeA,G,YAdD,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,GAAIC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,MACnC,OACE,sBAAKC,UAAU,kDAAf,UACE,qBAAKC,IAAI,SAASC,IAAG,+BAA0BN,EAA1B,cACrB,gCACE,6BAAKC,IACL,iCACE,4BAAIC,IACJ,4BAAIC,eCQCI,EAfE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACZC,EAAYD,EAAOE,KAAI,SAACC,EAAOC,GACnC,OACE,cAAC,EAAD,CAEEZ,GAAIQ,EAAOI,GAAGZ,GACdC,KAAMO,EAAOI,GAAGX,KAChBC,SAAUM,EAAOI,GAAGV,SACpBC,MAAOK,EAAOI,GAAGT,OAJZS,MAQX,OAAO,8BAAMH,KCDAI,EAZG,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cACnB,OACE,qBAAKV,UAAU,MAAf,SACE,uBACEA,UAAU,gCACVW,KAAK,OACLC,YAAY,cACZC,SAAUH,OCKHI,EAZA,SAACC,GACd,OACE,qBACEC,MAAO,CACLC,UAAW,SACXC,OAAQ,kBACRC,OAAQ,SAJZ,SAMGJ,EAAMK,YCmCEC,E,4MApCbC,MAAQ,CACNlB,OAAQ,GACRmB,YAAa,I,EAQfC,eAAiB,SAACC,GAChB,EAAKC,SAAS,CAAEH,YAAaE,EAAME,OAAOC,S,kEANvB,IAAD,OAClBC,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACvB,GAAD,OAAW,EAAKmB,SAAS,CAAEtB,OAAQG,S,+BAMnC,IAAD,EACyB0B,KAAKX,MAA7BlB,EADD,EACCA,OAAQmB,EADT,EACSA,YACVW,EAAc9B,EAAO+B,QAAO,SAACC,GACjC,OAAOA,EAAMvC,KACVwC,oBACAC,SAASf,EAAYc,wBAE1B,OAAsB,IAAlBjC,EAAOmC,OACF,yCAGP,sBAAKvC,UAAU,KAAf,UACE,oBAAIA,UAAU,KAAd,yBACA,cAAC,EAAD,CAAWU,cAAeuB,KAAKT,iBAC/B,cAAC,EAAD,UACE,cAAC,EAAD,CAAUpB,OAAQ8B,a,GA9BVM,IAAMC,WCITC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.c614533d.chunk.js","sourcesContent":["import React from 'react';\n\nconst Cards = ({ id, name, username, email }) => {\n  return (\n    <div className='tc bg-light-green dib br3 ma2 pa3 grow shadow-5'>\n      <img alt='robort' src={`https://robohash.org/${id}?200x200`} />\n      <div>\n        <h1>{name}</h1>\n        <span>\n          <p>{username}</p>\n          <p>{email}</p>\n        </span>\n      </div>\n    </div>\n  );\n};\nexport default Cards;\n","import React from 'react';\nimport Cards from './Cards';\n\nconst CardList = ({ robots }) => {\n  const cardArray = robots.map((users, i) => {\n    return (\n      <Cards\n        key={i}\n        id={robots[i].id}\n        name={robots[i].name}\n        username={robots[i].username}\n        email={robots[i].email}\n      />\n    );\n  });\n  return <div>{cardArray}</div>;\n};\n\nexport default CardList;\n","import React from 'react';\n\nconst SearchBox = ({ onSearchField }) => {\n  return (\n    <div className='pa2'>\n      <input\n        className='pa3 ba b--green bg-light-blue'\n        type='text'\n        placeholder='SearchRobot'\n        onChange={onSearchField}\n      />\n    </div>\n  );\n};\nexport default SearchBox;\n","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div\n      style={{\n        overflowY: 'scroll',\n        border: '1px solid black',\n        height: '500px',\n      }}>\n      {props.children}\n    </div>\n  );\n};\nexport default Scroll;\n","import React from 'react';\nimport './App.css';\nimport _ from 'tachyons';\n\nimport CardList from '../components/CardLists';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\n\nclass App extends React.Component {\n  state = {\n    robots: [],\n    searchField: '',\n  };\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then((response) => response.json())\n      .then((users) => this.setState({ robots: users }));\n  }\n  onSearchChange = (event) => {\n    this.setState({ searchField: event.target.value });\n  };\n\n  render() {\n    const { robots, searchField } = this.state;\n    const filterRobot = robots.filter((robot) => {\n      return robot.name\n        .toLocaleLowerCase()\n        .includes(searchField.toLocaleLowerCase());\n    });\n    if (robots.length === 0) {\n      return <h1>Loading</h1>;\n    }\n    return (\n      <div className='tc'>\n        <h1 className='f1'>RoboFriends</h1>\n        <SearchBox onSearchField={this.onSearchChange} />\n        <Scroll>\n          <CardList robots={filterRobot} />\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n/* <Cards\n          id={robots[0].id}\n          name={robots[0].name}\n          username={robots[0].username}\n          email={robots[0].email}\n        />\n        <Cards\n          id={robots[1].id}\n          name={robots[1].name}\n          username={robots[1].username}\n          email={robots[1].email}\n        />\n        <Cards\n          id={robots[2].id}\n          name={robots[2].name}\n          username={robots[2].username}\n          email={robots[2].email}\n        /> */\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}